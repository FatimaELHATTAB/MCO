from src.core.rules_loader import load_provider_config

def test_inheritance(tmp_path, monkeypatch):
    # Simuler un config/providers avec un base.yaml et un sustain.yaml
    cfg_dir = tmp_path / "config" / "providers"
    cfg_dir.mkdir(parents=True)

    base_yaml = """
matching:
  levels:
    - name: level1_exact
      type: exact
      left_keys: ["LEI"]
      right_keys: ["LEI"]
tie_break:
  priority: ["level1_exact"]
  prefer: ["LEI"]
"""
    (cfg_dir / "base.yaml").write_text(base_yaml)

    sustain_yaml = """
_inherit: base.yaml
provider: SUSTAIN
source:
  table: normalized.sustain
matching:
  levels:
    - name: level2_isin
      type: exact
      left_keys: ["ISIN"]
      right_keys: ["ISIN"]
"""
    (cfg_dir / "sustain.yaml").write_text(sustain_yaml)

    # Monkeypatch CONFIG_DIR
    monkeypatch.setattr("src.core.rules_loader.CONFIG_DIR", cfg_dir)

    cfg = load_provider_config("sustain")

    # Le résultat doit contenir à la fois level1_exact (hérité) et level2_isin (spécifique)
    levels = [lvl["name"] for lvl in cfg["matching"]["levels"]]
    assert "level1_exact" in levels
    assert "level2_isin" in levels
    assert cfg["provider"] == "SUSTAIN"
    assert cfg["source"]["table"] == "normalized.sustain"
